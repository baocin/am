package main

import (
	"context"
	"encoding/json"
	"log"
	"os"

	"github.com/nats-io/nats.go"
	"go.opentelemetry.io/otel"
	"go.opentelemetry.io/otel/trace"
)

var tracer = otel.Tracer("stt-processor")

func main() {
	nc, err := nats.Connect("nats://loom-nats:4222")
	if err != nil {
		log.Fatal("Failed to connect to NATS:", err)
	}
	defer nc.Close()

	useGPU := os.Getenv("USE_GPU") == "true"
	log.Printf("GPU enabled: %v", useGPU)

	_, err = nc.Subscribe("user.*.audio.stored", handleAudioProcessing(nc, useGPU))
	if err != nil {
		log.Fatal("Failed to subscribe to audio.stored:", err)
	}

	select {}
}

func handleAudioProcessing(nc *nats.Conn, useGPU bool) nats.MsgHandler {
	return func(msg *nats.Msg) {
		ctx, span := tracer.Start(context.Background(), "handleAudioProcessing")
		defer span.End()

		var payload struct {
			DeviceID  string `json:"device_id"`
			Timestamp string `json:"timestamp"`
			FilePath  string `json:"file_path"`
			Format    string `json:"format"`
			TraceID   string `json:"trace_id"`
		}

		if err := json.Unmarshal(msg.Data, &payload); err != nil {
			log.Println("Failed to unmarshal payload:", err)
			return
		}

		transcript := processWithPhi4(payload.FilePath, payload.Format, useGPU)

		result := map[string]string{
			"device_id":  payload.DeviceID,
			"timestamp":  payload.Timestamp,
			"transcript": transcript,
			"trace_id":   payload.TraceID,
		}
		data, _ := json.Marshal(result)
		subject := "user." + payload.DeviceID + ".audio.transcribed"
		if err := nc.Publish(subject, data); err != nil {
			log.Println("Failed to publish transcript:", err)
		}
	}
}

func processWithPhi4(filePath, format string, useGPU bool) string {
	if useGPU {
		log.Println("Processing with GPU")
		return "Mocked GPU-accelerated transcript"
	}
	log.Println("Processing with CPU")
	return "Mocked CPU transcript"
}