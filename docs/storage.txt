package main

import (
	"context"
	"database/sql"
	"encoding/json"
	"log"

	"github.com/nats-io/nats.go"
	_ "github.com/jackc/pgx/v5/stdlib"
	"go.opentelemetry.io/otel"
	"go.opentelemetry.io/otel/trace"
)

var tracer = otel.Tracer("storage-service")

func main() {
	nc, err := nats.Connect("nats://loom-nats:4222")
	if err != nil {
		log.Fatal("Failed to connect to NATS:", err)
	}
	defer nc.Close()

	db, err := sql.Open("pgx", "postgres://loom:loom@loom-timescale:5432/loom")
	if err != nil {
		log.Fatal("Failed to connect to database:", err)
	}
	defer db.Close()

	_, err = nc.Subscribe("user.*.data.raw", handleRawData(db))
	if err != nil {
		log.Fatal("Failed to subscribe to data.raw:", err)
	}

	_, err = nc.Subscribe("user.*.eeg.raw", handleEEGData(db))
	if err != nil {
		log.Fatal("Failed to subscribe to eeg.raw:", err)
	}

	select {}
}

func handleRawData(db *sql.DB) nats.MsgHandler {
	return func(msg *nats.Msg) {
		ctx, span := tracer.Start(context.Background(), "handleRawData")
		defer span.End()

		var payload struct {
			DeviceID  string `json:"device_id"`
			Timestamp string `json:"timestamp"`
			FilePath  string `json:"file_path"`
			Format    string `json:"format"`
			TraceID   string `json:"trace_id"`
		}

		if err := json.Unmarshal(msg.Data, &payload); err != nil {
			log.Println("Failed to unmarshal payload:", err)
			return
		}

		_, err := db.ExecContext(ctx,
			"INSERT INTO device_data_raw (device_id, timestamp, file_path, format, trace_id, processed) VALUES ($1, $2, $3, $4, $5, false) ON CONFLICT DO NOTHING",
			payload.DeviceID, payload.Timestamp, payload.FilePath, payload.Format, payload.TraceID)
		if err != nil {
			log.Println("Database insert error:", err)
			return
		}

		subject := "user." + payload.DeviceID + ".data.stored"
		if err := msg.Respond([]byte(`{"status":"stored"}`)); err != nil {
			log.Println("Failed to publish stored event:", err)
		}
	}
}

func handleEEGData(db *sql.DB) nats.MsgHandler {
	return func(msg *nats.Msg) {
		ctx, span := tracer.Start(context.Background(), "handleEEGData")
		defer span.End()

		var payload struct {
			DeviceID  string    `json:"device_id"`
			Timestamp string    `json:"timestamp"`
			Samples   []float64 `json:"samples"`
			Frequency int       `json:"frequency"`
			TraceID   string    `json:"trace_id"`
		}

		if err := json.Unmarshal(msg.Data, &payload); err != nil {
			log.Println("Failed to unmarshal EEG payload:", err)
			return
		}

		_, err := db.ExecContext(ctx,
			"INSERT INTO device_eeg_raw (device_id, timestamp, samples, frequency, trace_id, processed) VALUES ($1, $2, $3, $4, $5, false) ON CONFLICT DO NOTHING",
			payload.DeviceID, payload.Timestamp, payload.Samples, payload.Frequency, payload.TraceID)
		if err != nil {
			log.Println("Database insert error:", err)
			return
		}

		subject := "user." + payload.DeviceID + ".eeg.stored"
		if err := msg.Respond([]byte(`{"status":"stored"}`)); err != nil {
			log.Println("Failed to publish stored event:", err)
		}
	}
}